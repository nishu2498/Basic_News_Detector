# -*- coding: utf-8 -*-
"""News_Detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nishu2498/Basic_News_Detector/blob/master/News_Detector.ipynb

Importing basic python libraries
"""

import numpy as np
import pandas as pd
import itertools    #to return iterators

"""Importing Dataset and getting basic info about its features"""

df=pd.read_csv("G:/Desktop/cleanednews.csv")
# dataset needs to be cleaned from entries of irregular format manually.
print(('row,column'),df.shape)
df.head(10)

print("# total no rows in dataset: "+str(len(df.index)))

print(df.columns)

labels=df.label
labels.head(10)

"""Data Cleaning (removing nan values using Seaborn library heatmap and drop function if necessary)"""

import seaborn as sns
print("Data visualization of NAN values of data set using Seaborn library Heatmap")
sns.heatmap(df.isnull(),yticklabels=False,cmap="OrRd_r")

df.dropna(inplace=True)

"""Converting Unnamed index into a feature"""

# Set index
df = df.set_index("Unnamed: 0")

# Print first lines of `df`
df.head()

y = df.label

# Drop the `label` column
df.drop("label", axis=1)

sns.heatmap(df.isnull(),yticklabels=False,cmap="Accent")
#df.head(10)

"""Importing Machine learning libraries"""

import sklearn.metrics as metrics
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer  #import the vectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix  #for finding the accuracy and the confusion matrix

"""Train - Test Split"""

X_train, X_test, y_train, y_test = train_test_split(df['text'], y, test_size=0.2, random_state=7)

"""Build TFID_Vectorizer to transform train-test dataset to vectors"""

t_vec=TfidfVectorizer(stop_words='english', max_df=0.7)
t_train=t_vec.fit_transform(X_train)
t_test=t_vec.transform(X_test)

"""Building PassiveAggresive Classifier and predicting accuracy at max iteration value"""

score=[0]*101
for max_iter in range (1,101):
 pac=PassiveAggressiveClassifier(max_iter)
 pac.fit(t_train,y_train)

 y_pred=pac.predict(t_test)
 score[max_iter]=accuracy_score(y_test,y_pred)

 print(f'Accuracy: {round(score[max_iter]*100,2)}%')

print("  ")
print("The highest value of accuracy is at max-iter of value " ,end=" ")
print(score.index(max(score))) #print the value of iter where value is max
print('ACCURACY IS ',end="")
print(round(max(score)*100),end=" %")#

"""Confusion matrix for predictions"""

m=confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])
m

"""Confusion matrix visualization using matlab and seaborn libraries"""

import seaborn as sns
import matplotlib.pyplot as plt

axplot=plt.subplot()

sns.heatmap(m ,annot=True,ax = axplot,fmt = '2g',cmap='Greys_r',xticklabels=['FAKE', 'REAL'],yticklabels=['FAKE', 'REAL'],linewidths=2,cbar=True)

plt.figure(figsize=(15,15))  #size of figure

axplot.set_xlabel('Predicted labels')
axplot.set_ylabel('True labels')

axplot.set_title('Confusion Matrix of the classifier') #title
print(" ")
